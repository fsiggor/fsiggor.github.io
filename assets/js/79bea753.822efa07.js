"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[148],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),l=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(s.Provider,{value:e},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),u=l(t),g=a,f=u["".concat(s,".").concat(g)]||u[g]||m[g]||o;return t?r.createElement(f,i(i({ref:e},p),{},{components:t})):r.createElement(f,i({ref:e},p))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=g;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=n,c[u]="string"==typeof n?n:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7147:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={},i="Generics",c={unversionedId:"Golang/Generics",id:"Golang/Generics",title:"Generics",description:"Intro",source:"@site/docs/Golang/Generics.md",sourceDirName:"Golang",slug:"/Golang/Generics",permalink:"/docs/Golang/Generics",draft:!1,editUrl:"https://github.com/fsiggor/fsiggor.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/Golang/Generics.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Go Enums",permalink:"/docs/Golang/Enums"},next:{title:"Singleflight",permalink:"/docs/Golang/Packages/Singleflight"}},s={},l=[{value:"Intro",id:"intro",level:2}],p={toc:l},u="wrapper";function m(n){let{components:e,...t}=n;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generics"},"Generics"),(0,a.kt)("h2",{id:"intro"},"Intro"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"With generics, we can declare and use functions or types that are written to work with ",(0,a.kt)("em",{parentName:"strong"},"any")," ",(0,a.kt)("em",{parentName:"strong"},"type")," of a ",(0,a.kt)("em",{parentName:"strong"},"set of types")," provided.")),(0,a.kt)("p",null,"Simply, your generic functions and types will work with any number of types that you define them for, hence making them more useful in a broader sense in your Go program or project as a whole."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n)\n\n// Concats the string values of map m.\nfunc ConcatStr(m map[string]string) string {\n    var s string\n    for _, v := range m {\n        s += v\n    }\n    return s\n}\n\n// Concats the int values of map m.\nfunc ConcatInt(m map[string]int) int {\n    var s int\n    for _, v := range m {\n        s += v\n    }\n    return s\n}\n\n// Concat generic function\nfunc ConcatGeneric[K comparable, V Concat](m map[K]V) V {\n    var s V\n    for _, v := range m {\n        s += v\n    }\n    return s\n}\n\ntype Concat interface {\n    string | int\n}\n\nfunc main() {\n    // Initialize a map for the int values\n    map_string_int := map[string]int{\n        "first":  13,\n        "second": 26,\n        "third":  39,\n    }\n\n    // Initialize a map for the string values\n    map_string_string := map[string]string{\n        "first":  "firstval",\n        "second": "secondval",\n        "third":  "thirdval",\n    }\n\n    // call the two functions\n    fmt.Println("Concat outputs from the functions: \\n",\n        ConcatInt(map_string_int), "\\n",\n        ConcatStr(map_string_string))\n\n    // call the generic function with two kinds of inputs\n    fmt.Println("Concat with generic function: \\n",\n        ConcatGeneric(map_string_int), "\\n",\n        ConcatGeneric(map_string_string))\n}\n')),(0,a.kt)("p",null,"Reference: ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/this-code/understanding-golang-generics-with-examples-907cfbd5023b"},"https://medium.com/this-code/understanding-golang-generics-with-examples-907cfbd5023b")))}m.isMDXComponent=!0}}]);