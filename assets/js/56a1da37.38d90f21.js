"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[849],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,d=m["".concat(l,".").concat(u)]||m[u]||f[u]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[m]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},72:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,c={unversionedId:"Golang/Performance/Pre-Allocating for slice, map",id:"Golang/Performance/Pre-Allocating for slice, map",title:"Pre-Allocating for slice, map",description:"Allocating a slice with a capacity that is suitable for the number of elements it is expected to hold can improve performance in Go.",source:"@site/docs/Golang/Performance/Pre-Allocating for slice, map.md",sourceDirName:"Golang/Performance",slug:"/Golang/Performance/Pre-Allocating for slice, map",permalink:"/docs/Golang/Performance/Pre-Allocating for slice, map",draft:!1,editUrl:"https://github.com/fsiggor/fsiggor.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/Golang/Performance/Pre-Allocating for slice, map.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logging Best Practices",permalink:"/docs/Golang/Logging Best Practices"},next:{title:"Reflection",permalink:"/docs/Golang/Performance/Reflection"}},l={},s=[],p={toc:s},m="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Allocating a slice with a capacity that is suitable for the number of elements it is expected to hold can improve performance in Go."),(0,a.kt)("p",null,"Here is the benchmark:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n    // Allocate a slice with a small capacity\n    start := time.Now()\n    s := make([]int, 0, 10)\n    for i := 0; i < 100000; i++ {\n        s = append(s, i)\n    }\n    elapsed := time.Since(start)\n    fmt.Printf("Slice with small capacity: %v\\n", elapsed) // 1.165208ms\n\n    // Allocate a slice with a larger capacity\n    start = time.Now()\n    s = make([]int, 0, 100000)\n    for i := 0; i < 100000; i++ {\n        s = append(s, i)\n    }\n    elapsed = time.Since(start)\n    fmt.Printf("Slice with larger capacity: %v\\n", elapsed) // 361.333\xb5s\n}\n')),(0,a.kt)("p",null,"This is because allocating a slice with a larger capacity can reduce the number of times that the slice needs to be resized as elements are added. ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/@func25/go-secret-slice-a-deep-dive-into-slice-6bd7b0b70ec4"},"See")),(0,a.kt)("p",null,"Reference: ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/@func25/go-performance-boosters-the-top-5-tips-and-tricks-you-need-to-know-e5cf6e5bc683"},"https://medium.com/@func25/go-performance-boosters-the-top-5-tips-and-tricks-you-need-to-know-e5cf6e5bc683")))}f.isMDXComponent=!0}}]);