"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[866],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>d});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),u=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=u(e.components);return n.createElement(i.Provider,{value:r},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),g=o,d=p["".concat(i,".").concat(g)]||p[g]||f[g]||a;return t?n.createElement(d,l(l({ref:r},s),{},{components:t})):n.createElement(d,l({ref:r},s))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=g;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[p]="string"==typeof e?e:o,l[1]=c;for(var u=2;u<a;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1275:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var n=t(7462),o=(t(7294),t(3905));const a={},l="Worker Pool",c={unversionedId:"Golang/Patterns/Concurrency/Worker Pool",id:"Golang/Patterns/Concurrency/Worker Pool",title:"Worker Pool",description:"Worker pools are a \u201cconcurrency pattern\u201d in which a fixed number of workers runs parallel in order to work in a number of task that are holding in a queue.",source:"@site/docs/Golang/Patterns/Concurrency/Worker Pool.md",sourceDirName:"Golang/Patterns/Concurrency",slug:"/Golang/Patterns/Concurrency/Worker Pool",permalink:"/docs/Golang/Patterns/Concurrency/Worker Pool",draft:!1,editUrl:"https://github.com/fsiggor/fsiggor.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/Golang/Patterns/Concurrency/Worker Pool.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Singleflight",permalink:"/docs/Golang/Packages/Singleflight"},next:{title:"Pre-Allocating for slice, map",permalink:"/docs/Golang/Performance/Pre-Allocating for slice, map"}},i={},u=[],s={toc:u},p="wrapper";function f(e){let{components:r,...t}=e;return(0,o.kt)(p,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"worker-pool"},"Worker Pool"),(0,o.kt)("p",null,"Worker pools are a \u201cconcurrency pattern\u201d in which a fixed number of workers runs parallel in order to work in a number of task that are holding in a queue."),(0,o.kt)("p",null,"In golang we use goroutines and channels to build this pattern. Usually will the workers be defined by a goroutine that is holding until it get data through a channel which is the responsibility to coordinate the workers and the task in the queue (usually a buffered channel)."),(0,o.kt)("p",null,"![","[Pasted image 20230222164558.png]","]\n![","[Pasted image 20230222164614.png]","]"),(0,o.kt)("p",null,"Reference: ",(0,o.kt)("a",{parentName:"p",href:"https://blog.devgenius.io/golang-concurrency-worker-pool-2aff9cbc6255"},"https://blog.devgenius.io/golang-concurrency-worker-pool-2aff9cbc6255")))}f.isMDXComponent=!0}}]);