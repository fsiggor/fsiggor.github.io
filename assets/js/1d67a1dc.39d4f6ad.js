"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[341],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(t),f=a,g=m["".concat(s,".").concat(f)]||m[f]||p[f]||o;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9321:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},l="Go Enums",i={unversionedId:"Golang/Enums",id:"Golang/Enums",title:"Go Enums",description:"Normal Enum:",source:"@site/docs/Golang/Enums.md",sourceDirName:"Golang",slug:"/Golang/Enums",permalink:"/docs/Golang/Enums",draft:!1,editUrl:"https://github.com/fsiggor/fsiggor.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/Golang/Enums.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Default Values to Function Parameters",permalink:"/docs/Golang/Default Values to Function Parameters"},next:{title:"Generics",permalink:"/docs/Golang/Generics"}},s={},u=[{value:"Normal Enum:",id:"normal-enum",level:3},{value:"Flags Enum:",id:"flags-enum",level:3},{value:"Namespace Enum:",id:"namespace-enum",level:3}],c={toc:u},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"go-enums"},"Go Enums"),(0,a.kt)("h3",{id:"normal-enum"},"Normal Enum:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Color int  \n  \nconst (  \n  _                       // Skip a number zero or define a default value\n  Red   Color = iota + 1  // 1  \n  Blue                    // 2  \n  Green                   // 3  \n)\n")),(0,a.kt)("h3",{id:"flags-enum"},"Flags Enum:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type DamageType int  \n  \nconst (  \n  Poison   DamageType = 1 << iota // 1  \n  Bleeding                        // 2  \n  Flame                           // 4  \n)\n\n// Has returns a boolean indicating whether the specific flag is present in the set  \nfunc Has(set, flag int) bool {  \n  return set&flag == flag  \n}  \n  \n// Remove creates a new set of flags with the specific flag removed and returns it  \nfunc Remove(set, flag int) int {  \n  return set &^ flag  \n}  \n  \n// Add returns a new set of flags with the specific flag added  \nfunc Add(set, flag int) int {  \n  return set | flag    \n}\n\nfunc main() {  \n  damages := Poison | Flame  \n  fmt.Println(damages.Has(Flame))    // true  \n  fmt.Println(damages.Has(Bleeding)) // false  \n}\n")),(0,a.kt)("h3",{id:"namespace-enum"},"Namespace Enum:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Color int  \n  \nvar ColorEnum = struct {  \n    Red   Color  \n    Blue  Color  \n    Green Color  \n  }{  \n    Red:   0,  \n    Blue:  1,  \n    Green: 2,  \n}  \n  \nfunc main() {  \n  fmt.Println(ColorEnum.Red)  \n}\n")),(0,a.kt)("p",null,"Reference: ",(0,a.kt)("a",{parentName:"p",href:"https://levelup.gitconnected.com/go-enums-the-right-way-to-implement-and-iterate-9b1e233c8d9a"},"https://levelup.gitconnected.com/go-enums-the-right-way-to-implement-and-iterate-9b1e233c8d9a")))}p.isMDXComponent=!0}}]);